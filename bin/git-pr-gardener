#! /usr/bin/env python

import sys
import webbrowser
import getpass
import yaml
from datetime import datetime
from pytz import UTC
from github3 import GitHub
from operator import attrgetter
from os.path import expanduser

def two_factor_auth():
    code = ''
    while not code:
        # The user could accidentally press Enter before being ready,
        # let's protect them from doing that.
        code = raw_input('Enter 2FA code: ')
    print code
    return code

def commit_date(commit):
    return datetime.strptime(
        commit.to_json()['commit']['committer']['date'],
        '%Y-%m-%dT%H:%M:%SZ'
    ).replace(tzinfo=UTC)

def main():
    gh = GitHub()

    cfg_vars = yaml.safe_load(open(expanduser('~/.git-gardener.yaml')))

    username = cfg_vars.get('username')
    if username is None:
        print "Set username in the [gardener] section of your config file"
        return 1

    token = cfg_vars.get('token')
    if username is None:
        print "Set token in the [gardener] section of your config file"
        return 1

    filters = {}
    for filter in ('milestone', 'state', 'assignee', 'mentioned', 'labels'):
        filters[filter] = cfg_vars.get('filter-{}'.format(filter))

    gh.login(username, token=token)

    repos = cfg_vars.get('repos', [])

    for repo_name in repos:
        org, _, name = repo_name.partition(':')
        print repo_name, org, name
        repo = gh.repository(org, name)
        for issue in repo.iter_issues(**filters):
            if not issue.pull_request:
                continue

            pr = repo.pull_request(issue.number)

            comments = sorted(pr.iter_comments(), key=attrgetter('updated_at'), reverse=True)
            issue_comments = sorted(pr.iter_issue_comments(), key=attrgetter('updated_at'), reverse=True)
            commits = sorted(pr.iter_commits(), key=commit_date, reverse=True)

            latest_data = []
            if comments:
                latest_data.append((comments[0].updated_at, comments[0].user.login))

            if issue_comments:
                latest_data.append((issue_comments[0].updated_at, issue_comments[0].user.login))

            if commits:
                latest_data.append((commit_date(commits[0]), commits[0].committer_as_User().login))

            if not latest_data:
                continue

            latest_date, latest_user = max(latest_data)

            if latest_user != username:
                webbrowser.open(pr.html_url)

if __name__ == '__main__':
    sys.exit(main())
